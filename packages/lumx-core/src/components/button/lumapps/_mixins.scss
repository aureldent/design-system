@mixin lumx-button-base() {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    border: none;
    margin: 0;
    outline: none;
    text-decoration: none;
    user-select: none;
    vertical-align: top;

    &:hover {
        cursor: pointer;
    }
}

@mixin lumx-button-size($emphasis, $variant, $size) {
    height: map-get($lumx-sizes, $size);

    @if $variant == 'variant-button' {
        border-radius: $lumx-theme-border-radius;

        @if $emphasis == 'emphasis-high' or $emphasis == 'emphasis-medium' {
            @if $size == 'm' {
                padding: 0 $lumx-spacing-unit * 2;
            } @else if $size == 's' {
                padding: 0 $lumx-spacing-unit * 1.5;
            }
        } @else if $emphasis == 'emphasis-low' {
            padding: 0 $lumx-spacing-unit;
        }
    } @else if $variant == 'variant-icon' {
        width: map-get($lumx-sizes, $size);
        border-radius: $lumx-button-variant-icon-border-radius;
    }
}

@mixin lumx-button-reduced-spacing($size, $icon-position) {
    @if $size == 'm' {
        @if $icon-position == 'position-left' {
            padding-left: $lumx-spacing-unit * 1.5;
        } @else if $icon-position == 'position-right' {
            padding-right: $lumx-spacing-unit * 1.5;
        }
    } @else if $size == 's' {
        @if $icon-position == 'position-left' {
            padding-left: $lumx-spacing-unit;
        } @else if $icon-position == 'position-right' {
            padding-right: $lumx-spacing-unit;
        }
    }
}

@mixin lumx-button-color($emphasis, $color, $theme: null) {
    @include lumx-state('state-default', $emphasis, $color, $theme);

    &:hover {
        @include lumx-state('state-hover', $emphasis, $color, $theme);
    }

    &:active {
        @include lumx-state('state-active', $emphasis, $color, $theme);
    }

    &[data-focus-visible-added] {
        @include lumx-state('state-focus', $emphasis, $color, $theme);
    }

    &:disabled {
        @include lumx-state-disabled-input;
    }
}

@mixin lumx-button-is-selected($theme) {
    @include lumx-state-as-selected('state-default', $theme);

    &:hover {
        @include lumx-state-as-selected('state-hover', $theme);
    }

    &:active {
        @include lumx-state-as-selected('state-active', $theme);
    }

    &[data-focus-visible-added] {
        @include lumx-state-as-selected('state-focus', $theme);
    }
}

@mixin lumx-button($emphasis, $variant, $size, $color, $theme: null, $icon-position: null) {
    @include lumx-state-transition;
    @include lumx-button-base;
    @include lumx-button-size($emphasis, $variant, $size);

    @if $icon-position {
        @include lumx-button-size($size, $icon-position);
    }

    @include lumx-button-color($emphasis, $color, $theme);
}

@mixin lumx-button-icon($variant, $size, $position: null) {
    font-size: map-get($lumx-button-icon-sizes, $size);
    pointer-events: none;

    @if $variant == 'variant-button' {
        @if $position == 'position-left' {
            @if $size == 'm' {
                margin-right: $lumx-spacing-unit;
            } @else if $size == 's' {
                margin-right: $lumx-spacing-unit / 2;
            }
        } @else if $position == 'position-right' {
            @if $size == 'm' {
                margin-left: $lumx-spacing-unit;
            } @else if $size == 's' {
                margin-left: $lumx-spacing-unit / 2;
            }
        }
    }
}

@mixin lumx-button-text($size) {
    font-size: map-get($lumx-button-text-sizes, $size);
    font-weight: $lumx-button-text-weight;
    line-height: map-get($lumx-sizes, $size);
    pointer-events: none;
    text-transform: $lumx-button-text-transform;
}
